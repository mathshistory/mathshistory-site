# coding: utf-8

"""
    SendinBlue API

    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@sendinblue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetTransacEmailContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'subject': 'str',
        'template_id': 'int',
        '_date': 'str',
        'events': 'list[GetTransacEmailContentEvents]',
        'body': 'str',
        'attachment_count': 'int'
    }

    attribute_map = {
        'email': 'email',
        'subject': 'subject',
        'template_id': 'templateId',
        '_date': 'date',
        'events': 'events',
        'body': 'body',
        'attachment_count': 'attachmentCount'
    }

    def __init__(self, email=None, subject=None, template_id=None, _date=None, events=None, body=None, attachment_count=None):  # noqa: E501
        """GetTransacEmailContent - a model defined in Swagger"""  # noqa: E501

        self._email = None
        self._subject = None
        self._template_id = None
        self.__date = None
        self._events = None
        self._body = None
        self._attachment_count = None
        self.discriminator = None

        self.email = email
        self.subject = subject
        if template_id is not None:
            self.template_id = template_id
        self._date = _date
        self.events = events
        self.body = body
        self.attachment_count = attachment_count

    @property
    def email(self):
        """Gets the email of this GetTransacEmailContent.  # noqa: E501

        Email address to which transactional email has been sent  # noqa: E501

        :return: The email of this GetTransacEmailContent.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetTransacEmailContent.

        Email address to which transactional email has been sent  # noqa: E501

        :param email: The email of this GetTransacEmailContent.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def subject(self):
        """Gets the subject of this GetTransacEmailContent.  # noqa: E501

        Subject of the sent email  # noqa: E501

        :return: The subject of this GetTransacEmailContent.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this GetTransacEmailContent.

        Subject of the sent email  # noqa: E501

        :param subject: The subject of this GetTransacEmailContent.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def template_id(self):
        """Gets the template_id of this GetTransacEmailContent.  # noqa: E501

        Id of the template  # noqa: E501

        :return: The template_id of this GetTransacEmailContent.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this GetTransacEmailContent.

        Id of the template  # noqa: E501

        :param template_id: The template_id of this GetTransacEmailContent.  # noqa: E501
        :type: int
        """

        self._template_id = template_id

    @property
    def _date(self):
        """Gets the _date of this GetTransacEmailContent.  # noqa: E501

        Date on which transactional email was sent  # noqa: E501

        :return: The _date of this GetTransacEmailContent.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GetTransacEmailContent.

        Date on which transactional email was sent  # noqa: E501

        :param _date: The _date of this GetTransacEmailContent.  # noqa: E501
        :type: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def events(self):
        """Gets the events of this GetTransacEmailContent.  # noqa: E501

        Series of events which occurred on the transactional email  # noqa: E501

        :return: The events of this GetTransacEmailContent.  # noqa: E501
        :rtype: list[GetTransacEmailContentEvents]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this GetTransacEmailContent.

        Series of events which occurred on the transactional email  # noqa: E501

        :param events: The events of this GetTransacEmailContent.  # noqa: E501
        :type: list[GetTransacEmailContentEvents]
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")  # noqa: E501

        self._events = events

    @property
    def body(self):
        """Gets the body of this GetTransacEmailContent.  # noqa: E501

        Actual content of the transactional email that has been sent  # noqa: E501

        :return: The body of this GetTransacEmailContent.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this GetTransacEmailContent.

        Actual content of the transactional email that has been sent  # noqa: E501

        :param body: The body of this GetTransacEmailContent.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def attachment_count(self):
        """Gets the attachment_count of this GetTransacEmailContent.  # noqa: E501

        Count of the attachments that were sent in the email  # noqa: E501

        :return: The attachment_count of this GetTransacEmailContent.  # noqa: E501
        :rtype: int
        """
        return self._attachment_count

    @attachment_count.setter
    def attachment_count(self, attachment_count):
        """Sets the attachment_count of this GetTransacEmailContent.

        Count of the attachments that were sent in the email  # noqa: E501

        :param attachment_count: The attachment_count of this GetTransacEmailContent.  # noqa: E501
        :type: int
        """
        if attachment_count is None:
            raise ValueError("Invalid value for `attachment_count`, must not be `None`")  # noqa: E501

        self._attachment_count = attachment_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetTransacEmailContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetTransacEmailContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
