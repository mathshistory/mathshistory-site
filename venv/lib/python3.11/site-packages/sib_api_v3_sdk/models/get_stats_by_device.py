# coding: utf-8

"""
    SendinBlue API

    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@sendinblue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetStatsByDevice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'desktop': 'dict(str, GetDeviceBrowserStats)',
        'mobile': 'dict(str, GetDeviceBrowserStats)',
        'tablet': 'dict(str, GetDeviceBrowserStats)',
        'unknown': 'dict(str, GetDeviceBrowserStats)'
    }

    attribute_map = {
        'desktop': 'desktop',
        'mobile': 'mobile',
        'tablet': 'tablet',
        'unknown': 'unknown'
    }

    def __init__(self, desktop=None, mobile=None, tablet=None, unknown=None):  # noqa: E501
        """GetStatsByDevice - a model defined in Swagger"""  # noqa: E501

        self._desktop = None
        self._mobile = None
        self._tablet = None
        self._unknown = None
        self.discriminator = None

        if desktop is not None:
            self.desktop = desktop
        if mobile is not None:
            self.mobile = mobile
        if tablet is not None:
            self.tablet = tablet
        if unknown is not None:
            self.unknown = unknown

    @property
    def desktop(self):
        """Gets the desktop of this GetStatsByDevice.  # noqa: E501

        Statistics of the campaign on the basis of desktop devices  # noqa: E501

        :return: The desktop of this GetStatsByDevice.  # noqa: E501
        :rtype: dict(str, GetDeviceBrowserStats)
        """
        return self._desktop

    @desktop.setter
    def desktop(self, desktop):
        """Sets the desktop of this GetStatsByDevice.

        Statistics of the campaign on the basis of desktop devices  # noqa: E501

        :param desktop: The desktop of this GetStatsByDevice.  # noqa: E501
        :type: dict(str, GetDeviceBrowserStats)
        """

        self._desktop = desktop

    @property
    def mobile(self):
        """Gets the mobile of this GetStatsByDevice.  # noqa: E501

        Statistics of the campaign on the basis of mobile devices  # noqa: E501

        :return: The mobile of this GetStatsByDevice.  # noqa: E501
        :rtype: dict(str, GetDeviceBrowserStats)
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this GetStatsByDevice.

        Statistics of the campaign on the basis of mobile devices  # noqa: E501

        :param mobile: The mobile of this GetStatsByDevice.  # noqa: E501
        :type: dict(str, GetDeviceBrowserStats)
        """

        self._mobile = mobile

    @property
    def tablet(self):
        """Gets the tablet of this GetStatsByDevice.  # noqa: E501

        Statistics of the campaign on the basis of tablet devices  # noqa: E501

        :return: The tablet of this GetStatsByDevice.  # noqa: E501
        :rtype: dict(str, GetDeviceBrowserStats)
        """
        return self._tablet

    @tablet.setter
    def tablet(self, tablet):
        """Sets the tablet of this GetStatsByDevice.

        Statistics of the campaign on the basis of tablet devices  # noqa: E501

        :param tablet: The tablet of this GetStatsByDevice.  # noqa: E501
        :type: dict(str, GetDeviceBrowserStats)
        """

        self._tablet = tablet

    @property
    def unknown(self):
        """Gets the unknown of this GetStatsByDevice.  # noqa: E501

        Statistics of the campaign on the basis of unknown devices  # noqa: E501

        :return: The unknown of this GetStatsByDevice.  # noqa: E501
        :rtype: dict(str, GetDeviceBrowserStats)
        """
        return self._unknown

    @unknown.setter
    def unknown(self, unknown):
        """Sets the unknown of this GetStatsByDevice.

        Statistics of the campaign on the basis of unknown devices  # noqa: E501

        :param unknown: The unknown of this GetStatsByDevice.  # noqa: E501
        :type: dict(str, GetDeviceBrowserStats)
        """

        self._unknown = unknown

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetStatsByDevice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetStatsByDevice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
