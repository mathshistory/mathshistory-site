# coding: utf-8

"""
    SendinBlue API

    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@sendinblue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PostContactInfoContacts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success': 'list[str]',
        'failure': 'list[str]',
        'total': 'int',
        'process_id': 'int'
    }

    attribute_map = {
        'success': 'success',
        'failure': 'failure',
        'total': 'total',
        'process_id': 'processId'
    }

    def __init__(self, success=None, failure=None, total=None, process_id=None):  # noqa: E501
        """PostContactInfoContacts - a model defined in Swagger"""  # noqa: E501

        self._success = None
        self._failure = None
        self._total = None
        self._process_id = None
        self.discriminator = None

        if success is not None:
            self.success = success
        if failure is not None:
            self.failure = failure
        if total is not None:
            self.total = total
        if process_id is not None:
            self.process_id = process_id

    @property
    def success(self):
        """Gets the success of this PostContactInfoContacts.  # noqa: E501


        :return: The success of this PostContactInfoContacts.  # noqa: E501
        :rtype: list[str]
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this PostContactInfoContacts.


        :param success: The success of this PostContactInfoContacts.  # noqa: E501
        :type: list[str]
        """

        self._success = success

    @property
    def failure(self):
        """Gets the failure of this PostContactInfoContacts.  # noqa: E501


        :return: The failure of this PostContactInfoContacts.  # noqa: E501
        :rtype: list[str]
        """
        return self._failure

    @failure.setter
    def failure(self, failure):
        """Sets the failure of this PostContactInfoContacts.


        :param failure: The failure of this PostContactInfoContacts.  # noqa: E501
        :type: list[str]
        """

        self._failure = failure

    @property
    def total(self):
        """Gets the total of this PostContactInfoContacts.  # noqa: E501

        Displays the count of total number of contacts removed from list when user opts for \"all\" option.  # noqa: E501

        :return: The total of this PostContactInfoContacts.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PostContactInfoContacts.

        Displays the count of total number of contacts removed from list when user opts for \"all\" option.  # noqa: E501

        :param total: The total of this PostContactInfoContacts.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def process_id(self):
        """Gets the process_id of this PostContactInfoContacts.  # noqa: E501

        Id of the process created to remove contacts from list when user opts for \"all\" option.  # noqa: E501

        :return: The process_id of this PostContactInfoContacts.  # noqa: E501
        :rtype: int
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """Sets the process_id of this PostContactInfoContacts.

        Id of the process created to remove contacts from list when user opts for \"all\" option.  # noqa: E501

        :param process_id: The process_id of this PostContactInfoContacts.  # noqa: E501
        :type: int
        """

        self._process_id = process_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostContactInfoContacts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostContactInfoContacts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
