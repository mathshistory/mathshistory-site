# coding: utf-8

"""
    SendinBlue API

    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@sendinblue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AbTestCampaignResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'winning_version': 'str',
        'winning_criteria': 'str',
        'winning_subject_line': 'str',
        'open_rate': 'str',
        'click_rate': 'str',
        'winning_version_rate': 'str',
        'statistics': 'AbTestCampaignResultStatistics',
        'clicked_links': 'AbTestCampaignResultClickedLinks'
    }

    attribute_map = {
        'winning_version': 'winningVersion',
        'winning_criteria': 'winningCriteria',
        'winning_subject_line': 'winningSubjectLine',
        'open_rate': 'openRate',
        'click_rate': 'clickRate',
        'winning_version_rate': 'winningVersionRate',
        'statistics': 'statistics',
        'clicked_links': 'clickedLinks'
    }

    def __init__(self, winning_version=None, winning_criteria=None, winning_subject_line=None, open_rate=None, click_rate=None, winning_version_rate=None, statistics=None, clicked_links=None):  # noqa: E501
        """AbTestCampaignResult - a model defined in Swagger"""  # noqa: E501

        self._winning_version = None
        self._winning_criteria = None
        self._winning_subject_line = None
        self._open_rate = None
        self._click_rate = None
        self._winning_version_rate = None
        self._statistics = None
        self._clicked_links = None
        self.discriminator = None

        if winning_version is not None:
            self.winning_version = winning_version
        if winning_criteria is not None:
            self.winning_criteria = winning_criteria
        if winning_subject_line is not None:
            self.winning_subject_line = winning_subject_line
        if open_rate is not None:
            self.open_rate = open_rate
        if click_rate is not None:
            self.click_rate = click_rate
        if winning_version_rate is not None:
            self.winning_version_rate = winning_version_rate
        if statistics is not None:
            self.statistics = statistics
        if clicked_links is not None:
            self.clicked_links = clicked_links

    @property
    def winning_version(self):
        """Gets the winning_version of this AbTestCampaignResult.  # noqa: E501

        Winning Campaign Info. pending = Campaign has been picked for sending and winning version is yet to be decided, tie = A tie happened between both the versions, notAvailable = Campaign has not yet been picked for sending.  # noqa: E501

        :return: The winning_version of this AbTestCampaignResult.  # noqa: E501
        :rtype: str
        """
        return self._winning_version

    @winning_version.setter
    def winning_version(self, winning_version):
        """Sets the winning_version of this AbTestCampaignResult.

        Winning Campaign Info. pending = Campaign has been picked for sending and winning version is yet to be decided, tie = A tie happened between both the versions, notAvailable = Campaign has not yet been picked for sending.  # noqa: E501

        :param winning_version: The winning_version of this AbTestCampaignResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["notAvailable", "pending", "tie", "A", "B"]  # noqa: E501
        if winning_version not in allowed_values:
            raise ValueError(
                "Invalid value for `winning_version` ({0}), must be one of {1}"  # noqa: E501
                .format(winning_version, allowed_values)
            )

        self._winning_version = winning_version

    @property
    def winning_criteria(self):
        """Gets the winning_criteria of this AbTestCampaignResult.  # noqa: E501

        Criteria choosen for winning version (Open/Click)  # noqa: E501

        :return: The winning_criteria of this AbTestCampaignResult.  # noqa: E501
        :rtype: str
        """
        return self._winning_criteria

    @winning_criteria.setter
    def winning_criteria(self, winning_criteria):
        """Sets the winning_criteria of this AbTestCampaignResult.

        Criteria choosen for winning version (Open/Click)  # noqa: E501

        :param winning_criteria: The winning_criteria of this AbTestCampaignResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["Open", "Click"]  # noqa: E501
        if winning_criteria not in allowed_values:
            raise ValueError(
                "Invalid value for `winning_criteria` ({0}), must be one of {1}"  # noqa: E501
                .format(winning_criteria, allowed_values)
            )

        self._winning_criteria = winning_criteria

    @property
    def winning_subject_line(self):
        """Gets the winning_subject_line of this AbTestCampaignResult.  # noqa: E501

        Subject Line of current winning version  # noqa: E501

        :return: The winning_subject_line of this AbTestCampaignResult.  # noqa: E501
        :rtype: str
        """
        return self._winning_subject_line

    @winning_subject_line.setter
    def winning_subject_line(self, winning_subject_line):
        """Sets the winning_subject_line of this AbTestCampaignResult.

        Subject Line of current winning version  # noqa: E501

        :param winning_subject_line: The winning_subject_line of this AbTestCampaignResult.  # noqa: E501
        :type: str
        """

        self._winning_subject_line = winning_subject_line

    @property
    def open_rate(self):
        """Gets the open_rate of this AbTestCampaignResult.  # noqa: E501

        Open rate for current winning version  # noqa: E501

        :return: The open_rate of this AbTestCampaignResult.  # noqa: E501
        :rtype: str
        """
        return self._open_rate

    @open_rate.setter
    def open_rate(self, open_rate):
        """Sets the open_rate of this AbTestCampaignResult.

        Open rate for current winning version  # noqa: E501

        :param open_rate: The open_rate of this AbTestCampaignResult.  # noqa: E501
        :type: str
        """

        self._open_rate = open_rate

    @property
    def click_rate(self):
        """Gets the click_rate of this AbTestCampaignResult.  # noqa: E501

        Click rate for current winning version  # noqa: E501

        :return: The click_rate of this AbTestCampaignResult.  # noqa: E501
        :rtype: str
        """
        return self._click_rate

    @click_rate.setter
    def click_rate(self, click_rate):
        """Sets the click_rate of this AbTestCampaignResult.

        Click rate for current winning version  # noqa: E501

        :param click_rate: The click_rate of this AbTestCampaignResult.  # noqa: E501
        :type: str
        """

        self._click_rate = click_rate

    @property
    def winning_version_rate(self):
        """Gets the winning_version_rate of this AbTestCampaignResult.  # noqa: E501

        Open/Click rate for the winner version  # noqa: E501

        :return: The winning_version_rate of this AbTestCampaignResult.  # noqa: E501
        :rtype: str
        """
        return self._winning_version_rate

    @winning_version_rate.setter
    def winning_version_rate(self, winning_version_rate):
        """Sets the winning_version_rate of this AbTestCampaignResult.

        Open/Click rate for the winner version  # noqa: E501

        :param winning_version_rate: The winning_version_rate of this AbTestCampaignResult.  # noqa: E501
        :type: str
        """

        self._winning_version_rate = winning_version_rate

    @property
    def statistics(self):
        """Gets the statistics of this AbTestCampaignResult.  # noqa: E501


        :return: The statistics of this AbTestCampaignResult.  # noqa: E501
        :rtype: AbTestCampaignResultStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this AbTestCampaignResult.


        :param statistics: The statistics of this AbTestCampaignResult.  # noqa: E501
        :type: AbTestCampaignResultStatistics
        """

        self._statistics = statistics

    @property
    def clicked_links(self):
        """Gets the clicked_links of this AbTestCampaignResult.  # noqa: E501


        :return: The clicked_links of this AbTestCampaignResult.  # noqa: E501
        :rtype: AbTestCampaignResultClickedLinks
        """
        return self._clicked_links

    @clicked_links.setter
    def clicked_links(self, clicked_links):
        """Sets the clicked_links of this AbTestCampaignResult.


        :param clicked_links: The clicked_links of this AbTestCampaignResult.  # noqa: E501
        :type: AbTestCampaignResultClickedLinks
        """

        self._clicked_links = clicked_links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AbTestCampaignResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbTestCampaignResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
