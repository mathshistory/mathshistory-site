# coding: utf-8

"""
    SendinBlue API

    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@sendinblue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SendSmtpEmailMessageVersions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'to': 'list[SendSmtpEmailTo1]',
        'params': 'dict(str, object)',
        'bcc': 'list[SendSmtpEmailBcc]',
        'cc': 'list[SendSmtpEmailCc]',
        'reply_to': 'SendSmtpEmailReplyTo1',
        'subject': 'str'
    }

    attribute_map = {
        'to': 'to',
        'params': 'params',
        'bcc': 'bcc',
        'cc': 'cc',
        'reply_to': 'replyTo',
        'subject': 'subject'
    }

    def __init__(self, to=None, params=None, bcc=None, cc=None, reply_to=None, subject=None):  # noqa: E501
        """SendSmtpEmailMessageVersions - a model defined in Swagger"""  # noqa: E501

        self._to = None
        self._params = None
        self._bcc = None
        self._cc = None
        self._reply_to = None
        self._subject = None
        self.discriminator = None

        self.to = to
        if params is not None:
            self.params = params
        if bcc is not None:
            self.bcc = bcc
        if cc is not None:
            self.cc = cc
        if reply_to is not None:
            self.reply_to = reply_to
        if subject is not None:
            self.subject = subject

    @property
    def to(self):
        """Gets the to of this SendSmtpEmailMessageVersions.  # noqa: E501

        List of email addresses and names (_optional_) of the recipients. For example, [{\"name\":\"Jimmy\", \"email\":\"jimmy98@example.com\"}, {\"name\":\"Joe\", \"email\":\"joe@example.com\"}]  # noqa: E501

        :return: The to of this SendSmtpEmailMessageVersions.  # noqa: E501
        :rtype: list[SendSmtpEmailTo1]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SendSmtpEmailMessageVersions.

        List of email addresses and names (_optional_) of the recipients. For example, [{\"name\":\"Jimmy\", \"email\":\"jimmy98@example.com\"}, {\"name\":\"Joe\", \"email\":\"joe@example.com\"}]  # noqa: E501

        :param to: The to of this SendSmtpEmailMessageVersions.  # noqa: E501
        :type: list[SendSmtpEmailTo1]
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def params(self):
        """Gets the params of this SendSmtpEmailMessageVersions.  # noqa: E501

        Pass the set of attributes to customize the template. For example, {\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}. It's considered only if template is in New Template Language format.  # noqa: E501

        :return: The params of this SendSmtpEmailMessageVersions.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this SendSmtpEmailMessageVersions.

        Pass the set of attributes to customize the template. For example, {\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}. It's considered only if template is in New Template Language format.  # noqa: E501

        :param params: The params of this SendSmtpEmailMessageVersions.  # noqa: E501
        :type: dict(str, object)
        """

        self._params = params

    @property
    def bcc(self):
        """Gets the bcc of this SendSmtpEmailMessageVersions.  # noqa: E501

        List of email addresses and names (optional) of the recipients in bcc  # noqa: E501

        :return: The bcc of this SendSmtpEmailMessageVersions.  # noqa: E501
        :rtype: list[SendSmtpEmailBcc]
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this SendSmtpEmailMessageVersions.

        List of email addresses and names (optional) of the recipients in bcc  # noqa: E501

        :param bcc: The bcc of this SendSmtpEmailMessageVersions.  # noqa: E501
        :type: list[SendSmtpEmailBcc]
        """

        self._bcc = bcc

    @property
    def cc(self):
        """Gets the cc of this SendSmtpEmailMessageVersions.  # noqa: E501

        List of email addresses and names (optional) of the recipients in cc  # noqa: E501

        :return: The cc of this SendSmtpEmailMessageVersions.  # noqa: E501
        :rtype: list[SendSmtpEmailCc]
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this SendSmtpEmailMessageVersions.

        List of email addresses and names (optional) of the recipients in cc  # noqa: E501

        :param cc: The cc of this SendSmtpEmailMessageVersions.  # noqa: E501
        :type: list[SendSmtpEmailCc]
        """

        self._cc = cc

    @property
    def reply_to(self):
        """Gets the reply_to of this SendSmtpEmailMessageVersions.  # noqa: E501


        :return: The reply_to of this SendSmtpEmailMessageVersions.  # noqa: E501
        :rtype: SendSmtpEmailReplyTo1
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this SendSmtpEmailMessageVersions.


        :param reply_to: The reply_to of this SendSmtpEmailMessageVersions.  # noqa: E501
        :type: SendSmtpEmailReplyTo1
        """

        self._reply_to = reply_to

    @property
    def subject(self):
        """Gets the subject of this SendSmtpEmailMessageVersions.  # noqa: E501

        Custom subject specific to message version   # noqa: E501

        :return: The subject of this SendSmtpEmailMessageVersions.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SendSmtpEmailMessageVersions.

        Custom subject specific to message version   # noqa: E501

        :param subject: The subject of this SendSmtpEmailMessageVersions.  # noqa: E501
        :type: str
        """

        self._subject = subject

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendSmtpEmailMessageVersions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendSmtpEmailMessageVersions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
