# coding: utf-8

"""
    SendinBlue API

    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@sendinblue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AbTestCampaignResultStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'openers': 'AbTestVersionStats',
        'clicks': 'AbTestVersionStats',
        'unsubscribed': 'AbTestVersionStats',
        'hard_bounces': 'AbTestVersionStats',
        'soft_bounces': 'AbTestVersionStats',
        'complaints': 'AbTestVersionStats'
    }

    attribute_map = {
        'openers': 'openers',
        'clicks': 'clicks',
        'unsubscribed': 'unsubscribed',
        'hard_bounces': 'hardBounces',
        'soft_bounces': 'softBounces',
        'complaints': 'complaints'
    }

    def __init__(self, openers=None, clicks=None, unsubscribed=None, hard_bounces=None, soft_bounces=None, complaints=None):  # noqa: E501
        """AbTestCampaignResultStatistics - a model defined in Swagger"""  # noqa: E501

        self._openers = None
        self._clicks = None
        self._unsubscribed = None
        self._hard_bounces = None
        self._soft_bounces = None
        self._complaints = None
        self.discriminator = None

        self.openers = openers
        self.clicks = clicks
        self.unsubscribed = unsubscribed
        self.hard_bounces = hard_bounces
        self.soft_bounces = soft_bounces
        self.complaints = complaints

    @property
    def openers(self):
        """Gets the openers of this AbTestCampaignResultStatistics.  # noqa: E501


        :return: The openers of this AbTestCampaignResultStatistics.  # noqa: E501
        :rtype: AbTestVersionStats
        """
        return self._openers

    @openers.setter
    def openers(self, openers):
        """Sets the openers of this AbTestCampaignResultStatistics.


        :param openers: The openers of this AbTestCampaignResultStatistics.  # noqa: E501
        :type: AbTestVersionStats
        """
        if openers is None:
            raise ValueError("Invalid value for `openers`, must not be `None`")  # noqa: E501

        self._openers = openers

    @property
    def clicks(self):
        """Gets the clicks of this AbTestCampaignResultStatistics.  # noqa: E501


        :return: The clicks of this AbTestCampaignResultStatistics.  # noqa: E501
        :rtype: AbTestVersionStats
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this AbTestCampaignResultStatistics.


        :param clicks: The clicks of this AbTestCampaignResultStatistics.  # noqa: E501
        :type: AbTestVersionStats
        """
        if clicks is None:
            raise ValueError("Invalid value for `clicks`, must not be `None`")  # noqa: E501

        self._clicks = clicks

    @property
    def unsubscribed(self):
        """Gets the unsubscribed of this AbTestCampaignResultStatistics.  # noqa: E501


        :return: The unsubscribed of this AbTestCampaignResultStatistics.  # noqa: E501
        :rtype: AbTestVersionStats
        """
        return self._unsubscribed

    @unsubscribed.setter
    def unsubscribed(self, unsubscribed):
        """Sets the unsubscribed of this AbTestCampaignResultStatistics.


        :param unsubscribed: The unsubscribed of this AbTestCampaignResultStatistics.  # noqa: E501
        :type: AbTestVersionStats
        """
        if unsubscribed is None:
            raise ValueError("Invalid value for `unsubscribed`, must not be `None`")  # noqa: E501

        self._unsubscribed = unsubscribed

    @property
    def hard_bounces(self):
        """Gets the hard_bounces of this AbTestCampaignResultStatistics.  # noqa: E501


        :return: The hard_bounces of this AbTestCampaignResultStatistics.  # noqa: E501
        :rtype: AbTestVersionStats
        """
        return self._hard_bounces

    @hard_bounces.setter
    def hard_bounces(self, hard_bounces):
        """Sets the hard_bounces of this AbTestCampaignResultStatistics.


        :param hard_bounces: The hard_bounces of this AbTestCampaignResultStatistics.  # noqa: E501
        :type: AbTestVersionStats
        """
        if hard_bounces is None:
            raise ValueError("Invalid value for `hard_bounces`, must not be `None`")  # noqa: E501

        self._hard_bounces = hard_bounces

    @property
    def soft_bounces(self):
        """Gets the soft_bounces of this AbTestCampaignResultStatistics.  # noqa: E501


        :return: The soft_bounces of this AbTestCampaignResultStatistics.  # noqa: E501
        :rtype: AbTestVersionStats
        """
        return self._soft_bounces

    @soft_bounces.setter
    def soft_bounces(self, soft_bounces):
        """Sets the soft_bounces of this AbTestCampaignResultStatistics.


        :param soft_bounces: The soft_bounces of this AbTestCampaignResultStatistics.  # noqa: E501
        :type: AbTestVersionStats
        """
        if soft_bounces is None:
            raise ValueError("Invalid value for `soft_bounces`, must not be `None`")  # noqa: E501

        self._soft_bounces = soft_bounces

    @property
    def complaints(self):
        """Gets the complaints of this AbTestCampaignResultStatistics.  # noqa: E501


        :return: The complaints of this AbTestCampaignResultStatistics.  # noqa: E501
        :rtype: AbTestVersionStats
        """
        return self._complaints

    @complaints.setter
    def complaints(self, complaints):
        """Sets the complaints of this AbTestCampaignResultStatistics.


        :param complaints: The complaints of this AbTestCampaignResultStatistics.  # noqa: E501
        :type: AbTestVersionStats
        """
        if complaints is None:
            raise ValueError("Invalid value for `complaints`, must not be `None`")  # noqa: E501

        self._complaints = complaints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AbTestCampaignResultStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbTestCampaignResultStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
